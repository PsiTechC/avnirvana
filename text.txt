// autoTable(doc, {
        //     head: [
        //         titleRow as any,
        //         subtitleRow as any,
        //         ["Sr. No.", "Image", "Name & Specification", "GST %", "MRP"]
        //     ],
        //     body: rows as any[][],
        //     margin: { top: headerY + headerBlockH + 2, bottom: footerH + 4, left: thinMargin, right: thinMargin },
        //     theme: "grid",

        //     headStyles: {
        //         fillColor: [200, 200, 200],
        //         textColor: 0,
        //         fontStyle: "bold",
        //         halign: "center",
        //         valign: "middle",
        //         fontSize: 11,
        //         cellPadding: 4,
        //         lineWidth: 0.5,
        //         lineColor: [0, 0, 0], // black borders
        //     },
        //     styles: {
        //         fontSize: 10,
        //         cellPadding: 4,
        //         halign: "left",
        //         valign: "middle",
        //         overflow: "linebreak",
        //         lineWidth: 0.5,
        //         lineColor: [0, 0, 0], // black borders
        //     },
        //     bodyStyles: {
        //         minCellHeight: MIN_ROW_H,
        //     },
        //     rowPageBreak: "avoid",

        //     columnStyles: {
        //         0: { cellWidth: colWidths[0], halign: "center" }, 
        //         1: { cellWidth: colWidths[1], halign: "center", valign: "middle" }, // Image                                    // Name (slightly narrower)
        //         2: { cellWidth: colWidths[2], fontSize: 9 },                         // Name Specification smaller font  ← CHANGED
        //         3: { cellWidth: colWidths[3], halign: "center" },                    // GST
        //         4: { cellWidth: colWidths[4], halign: "center" },                    // MRP wider so it won't wrap  ← CHANGED
        //     },

        //     didDrawPage: (data) => {
        //         // --- Brand logo ---
        //         if (brandLogoB64) {
        //             try {
        //                 doc.addImage(brandLogoB64, "PNG", thinMargin, headerY, brandLogoW, brandLogoH);
        //             } catch { }
        //         }

        //         // --- AV logo + company info ---
        //         const INFO_BLOCK_W = 110;
        //         const infoLeftX = pageWidth - thinMargin - INFO_BLOCK_W;
        //         if (avLogoB64) {
        //             try {
        //                 doc.addImage(avLogoB64, "PNG", infoLeftX, headerY, avLogoW, avLogoH);
        //             } catch { }
        //         }

        //         if (infoLines.length) {
        //             doc.setFontSize(8);
        //             doc.setFont("sans", "normal");

        //             const startY = headerY + avLogoH + 4;
        //             let cursorY = startY;

        //             infoLines.forEach((line, idx) => {
        //                 let y = cursorY + idx * 4;

        //                 // Detect email
        //                 if (line.includes("Email:")) {
        //                     const parts = line.split("Email:");
        //                     const leftPart = parts[0].trim();
        //                     const email = parts[1]?.trim();

        //                     // Print left part normally
        //                     if (leftPart) {
        //                         doc.setTextColor(0, 0, 0);
        //                         doc.text(leftPart, infoLeftX, y, { align: "left" });
        //                     }

        //                     // Print email in blue + add link
        //                     if (email) {
        //                         const emailX = doc.getTextWidth(leftPart + " ") + infoLeftX;
        //                         doc.setTextColor(0, 0, 255);
        //                         doc.text(`Email: ${email}`, emailX, y, { align: "left" });
        //                         doc.link(emailX, y - 3, doc.getTextWidth(email), 6, { url: `mailto:${email}` });
        //                     }
        //                 }
        //                 // Detect website
        //                 else if (line.startsWith("Website:")) {
        //                     const website = line.replace("Website:", "").trim();
        //                     doc.setTextColor(0, 0, 255);
        //                     doc.text(`Website: ${website}`, infoLeftX, y, { align: "left" });
        //                     doc.link(infoLeftX + doc.getTextWidth("Website: "), y - 3, doc.getTextWidth(website), 6, {
        //                         url: website.startsWith("http") ? website : `https://${website}`,
        //                     });
        //                 }
        //                 // Default (normal black text)
        //                 else {
        //                     doc.setTextColor(0, 0, 0);
        //                     doc.text(line, infoLeftX, y, { align: "left" });
        //                 }
        //             });
        //         }

        //         // --- Footer stays as is ---
        //         const footerHeight = 12;
        //         const footerTop = pageHeight - footerHeight;
        //         doc.setFillColor(200, 200, 200);
        //         doc.rect(0, footerTop, pageWidth, footerHeight, "F");

        //         doc.setFontSize(9);
        //         doc.setFont("helvetica", "bold");
        //         doc.setTextColor(204, 0, 0);
        //         doc.text(
        //             `[Effective ${effectiveStr}. This pricelist supersedes all previous pricelists.]`,
        //             pageWidth / 2,
        //             footerTop + footerHeight / 2 + 2,
        //             { align: "center" }
        //         );

        //         doc.setFont("helvetica", "bold");
        //         doc.setTextColor(0, 0, 0);
        //         doc.text(`Page ${data.pageNumber}`, pageWidth - thinMargin, footerTop + footerHeight / 2 + 2, {
        //             align: "right",
        //         });
        //     },



            // //////////////Original image handler//////////////
            // didDrawCell: (cell) => {
            //     if (cell.section === "body" && cell.column.index === 1) {
            //         const img = productImages[cell.row.index];
            //         if (!img) return;

            //         const cw = cell.cell.width;
            //         const ch = cell.cell.height;

            //         const boxW = cw - 2 * IMG_PAD;
            //         const boxH = IMG_BOX_H;

            //         const maxDrawableH = Math.max(0, ch - 2 * IMG_PAD);
            //         const drawH = Math.min(boxH, maxDrawableH);
            //         const drawW = boxW;

            //         const x = cell.cell.x + (cw - drawW) / 2;
            //         const y = cell.cell.y + (ch - drawH) / 2;

            //         try { doc.addImage(img, "JPEG", x, y, drawW, drawH); }
            //         catch { try { doc.addImage(img, "PNG", x, y, drawW, drawH); } catch { } }
            //     }
            // },
        // });









            // --- Step 1: Split name + spec --- 1st version
            // didParseCell: (data) => {
            //     if (data.section === "body" && data.column.index === 2) {
            //         const raw = String(data.cell.raw || "");
            //         const [name, ...rest] = raw.split("\n");
            //         const spec = rest.join(" ").trim();
            //         // store them separately so we can draw later
            //         (data.cell as any).customName = name || "";
            //         (data.cell as any).customSpec = spec || "";
            //         // prevent default text
            //         data.cell.text = [""];
            //     }
            // },


            // --- Step 1: Split name + spec --- 2nd version
            // didParseCell: (data) => {
            //     if (data.section === "body" && data.column.index === 2) {
            //         const raw = String(data.cell.raw || "");
            //         const [name, ...rest] = raw.split("\n");
            //         const spec = rest.join(" ").trim();

            //         (data.cell as any).customName = name || "";
            //         (data.cell as any).customSpec = spec || "";

            //         // Estimate height for spec text
            //         const lineHeight = 5;
            //         const specHeight = doc.getTextDimensions(spec || "", {
            //             maxWidth: data.cell.width - 4,
            //         }).h;

            //         // Increase row height dynamically
            //         data.cell.height = 10 + specHeight;

            //         // Prevent default autoTable text
            //         data.cell.text = [""];
            //     }
            // },




















            // --- Step 2: Render with custom colors --- 1st version
            // didDrawCell: (cell) => {
            //     // Images (keep as-is)
            //     if (cell.section === "body" && cell.column.index === 1) {
            //         const img = productImages[cell.row.index];
            //         if (!img) return;
            //         const cw = cell.cell.width;
            //         const ch = cell.cell.height;
            //         const boxW = cw - 2 * IMG_PAD;
            //         const boxH = IMG_BOX_H;
            //         const maxDrawableH = Math.max(0, ch - 2 * IMG_PAD);
            //         const drawH = Math.min(boxH, maxDrawableH);
            //         const drawW = boxW;
            //         const x = cell.cell.x + (cw - drawW) / 2;
            //         const y = cell.cell.y + (ch - drawH) / 2;
            //         try { doc.addImage(img, "JPEG", x, y, drawW, drawH); }
            //         catch { try { doc.addImage(img, "PNG", x, y, drawW, drawH); } catch { } }
            //     }

            //     // Name + Spec styling
            //     if (cell.section === "body" && cell.column.index === 2) {
            //         const name = (cell.cell as any).customName || "";
            //         const spec = (cell.cell as any).customSpec || "";
            //         const x = cell.cell.x + 2;
            //         let y = cell.cell.y + 6;

            //         if (name) {
            //             doc.setFont("helvetica", "bold");
            //             doc.setFontSize(10);
            //             doc.setTextColor(30, 144, 255); // sky blue
            //             doc.text(name, x, y, { baseline: "top" });
            //         }

            //         if (spec) {
            //             y += 5;
            //             doc.setFont("helvetica", "normal");
            //             doc.setFontSize(7);
            //             doc.setTextColor(0, 0, 0);
            //             doc.text(spec, x, y, { baseline: "top" });
            //         }
            //     }
            // }


            // --- Step 2: Render with custom colors --- 2nd version 
            // didDrawCell: (cell) => {
            //     // --- Image column ---
            //     if (cell.section === "body" && cell.column.index === 1) {
            //         const img = productImages[cell.row.index];
            //         if (!img) return;

            //         const cw = cell.cell.width;
            //         const ch = cell.cell.height;

            //         const x = cell.cell.x + 2;
            //         const y = cell.cell.y + 2;

            //         try {
            //             // Get image dimensions
            //             const imgProps = doc.getImageProperties(img);
            //             const ratio = imgProps.width / imgProps.height;

            //             // Fit into box without enlarging
            //             let drawW = imgProps.width * 0.25; // scale down for safety
            //             let drawH = drawW / ratio;

            //             if (drawW > cw - 4) {
            //                 drawW = cw - 4;
            //                 drawH = drawW / ratio;
            //             }
            //             if (drawH > ch - 4) {
            //                 drawH = ch - 4;
            //                 drawW = drawH * ratio;
            //             }

            //             // Center image
            //             const offsetX = x + (cw - drawW) / 2 - 2;
            //             const offsetY = y + (ch - drawH) / 2 - 2;

            //             doc.addImage(img, "PNG", offsetX, offsetY, drawW, drawH);
            //         } catch (e) { }
            //     }

            //     // --- Name & Spec column ---
            //     if (cell.section === "body" && cell.column.index === 2) {
            //         const name = (cell.cell as any).customName || "";
            //         const spec = (cell.cell as any).customSpec || "";
            //         const x = cell.cell.x + 2;
            //         let y = cell.cell.y + 6;

            //         if (name) {
            //             doc.setFont("helvetica", "bold");
            //             doc.setFontSize(10);
            //             doc.setTextColor(30, 144, 255); // sky blue
            //             doc.text(name, x, y, { maxWidth: cell.cell.width - 4, baseline: "top" });
            //         }

            //         if (spec) {
            //             y += 6;
            //             doc.setFont("helvetica", "normal");
            //             doc.setFontSize(7);
            //             doc.setTextColor(0, 0, 0);
            //             doc.text(spec, x, y, {
            //                 maxWidth: cell.cell.width - 4,
            //                 baseline: "top",
            //             });
            //         }
            //     }
            // }
